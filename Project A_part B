package ECTE331_Project_A;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;

public class Main {
	// Initializing variables
	public static int[][] grayImage;
	public static int source_image_width;
	public static int source_image_height;
	public static int template_image_width;
	public static int template_image_height;
	private static BufferedImage image_1;
	private static BufferedImage image_2;
	private static BufferedImage image;

	public static void main(String[] args) throws Exception {
		String sourceimage = "TenCardG.jpg"; // name of the file source image
		String templateimage = "Template.jpg"; // name of the file template image

		File inp_1 = new File(sourceimage); // read source image
		File inp_2 = new File(templateimage); // read template image

		// Read images and get dimensions
		image_1 = ImageIO.read(inp_1);
		image_2 = ImageIO.read(inp_2);
		source_image_width = image_1.getWidth(); // get the width of the source image
		source_image_height = image_1.getHeight(); // get the height of the source image
		template_image_width = image_2.getWidth(); // get the width of the template image
		template_image_height = image_2.getHeight(); // get the height of the template image

		// Initialize image pixel arrays
		int[][] source_pixel = readColourImage(sourceimage); // store the source pixels values into array
		int[][] template_pixel = readColourImage(templateimage); //store the template pixels values into array

		// Arrays for processing
		boolean[][] visited = new boolean[source_image_height][source_image_width]; // array to prevent overlapping

		// Number of threads to use
		int numThreads = 5; 

		// List to hold threads
		List<Thread> threads = new ArrayList<>();

		// Divide rows among threads
		int rowsPerThread = source_image_height / numThreads;
		long t0 = System.nanoTime(); // get time
		
		for (int threadNum = 0; threadNum < numThreads; threadNum++) // for each thread, the start row and end row is decided 
		{
			int startRow = threadNum * rowsPerThread;
			int endRow;
			if (threadNum == numThreads - 1) // for the last thread
			{
				endRow = source_image_height - template_image_height;
			} 
			else // for all other threads
			{
				endRow = ((threadNum + 1) * rowsPerThread) ;
			}
			
			// Threads are created
			ThreadA mythread = new ThreadA(startRow, endRow, source_pixel, template_pixel, visited, source_image_width, source_image_height, template_image_width, template_image_height);
			threads.add(mythread);
			mythread.start(); // the thread is started
		}

		// Wait for all threads to complete
		for (Thread thread : threads) 
		{
			thread.join();
		}
		
		// Extract rows and columns from threads
        ArrayList<Integer> rows = new ArrayList<>();
        ArrayList<Integer> columns = new ArrayList<>();
        for (Thread thread : threads) {
            if (thread instanceof ThreadA) {
                ThreadA threadA = (ThreadA) thread;
                rows.addAll(threadA.getRows());
                columns.addAll(threadA.getColumns());
            }
        }
        
        // the rectangle is drawn against the match
		writeColourImage(source_pixel, "output.png", rows, columns, template_image_width, template_image_height);
		long t1 = System.nanoTime(); // get time
		
		System.out.println("Time to match: " + ((t1-t0)/(10e8))+ "s"); // time taken to find the match

	}

	// Method to read color image
	public static int[][] readColourImage(String fileName) throws IOException {
		File inp = new File(fileName);
		image = ImageIO.read(inp);
		int width = image.getWidth();
		int height = image.getHeight();

		// Check image dimensions
		if (width == 0 || height == 0) {
			System.err.println("Error: Failed to read image dimensions.");
			return null;
		}

		// RGB pixel values
		byte[] pixels;
		pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
		System.out.println("Dimension of the image: WxH= " + width + " x " + height + " | num of pixels: " + pixels.length);

		// Convert RGB to grayscale in a 2D array grayImage
		int[][] grayImage = new int[height][width];
		int coord;
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				coord = 3 * (i * width + j);
				int pr = ((short) pixels[coord] & 0xff); // red
				int pg = (((short) pixels[coord + 1] & 0xff));// green
				int pb = (((short) pixels[coord + 2] & 0xff));// blue

				grayImage[i][j] = (int) Math.round(0.299 * pr + 0.587 * pg + 0.114 * pb);
			}
		}
		return grayImage;
	}

	// Method to draw rectangle
	public static void writeColourImage(int[][] source_pixel, String fileName, ArrayList<Integer> rows, ArrayList<Integer> columns, int rectWidth, int rectHeight) throws Exception {
		Image scaledImage = image.getScaledInstance(-1, -1, 0);

		for (int i = 0; i < rows.size(); i++) {
			int boxX = columns.get(i); // X coordinate of the top-left corner
			int boxY = rows.get(i); // Y coordinate of the top-left corner
			int boxWidth = rectWidth; // Width of the rectangle
			int boxHeight = rectHeight; // Height of the rectangle
			int boxColor = Color.black.getRGB(); // Color of the box

			// Draw the top and bottom lines of the box
			for (int x = boxX; x < boxX + boxWidth; x++) {
				if (x < source_image_width) {
					if (boxY < source_image_height) {
						source_pixel[boxY][x] = boxColor; // Top line
					}
					if (boxY + boxHeight < source_image_height) {
						source_pixel[boxY + boxHeight][x] = boxColor; // Bottom line
					}
				}
			}

			// Draw the left and right lines of the box
			for (int y = boxY; y < boxY + boxHeight; y++) {
				if (y < source_image_height) {
					if (boxX < source_image_width) {
						source_pixel[y][boxX] = boxColor; // Left line
					}
					if (boxX + boxWidth < source_image_width) {
						source_pixel[y][boxX + boxWidth] = boxColor; // Right line
					}
				}
			}
		}

		// Write the modified pixel array back to the BufferedImage
		for (int y = 0; y < source_image_height; y++) {
			for (int x = 0; x < source_image_width; x++) {
				int grayValue = source_pixel[y][x];
				int rgb = grayValue << 16 | grayValue << 8 | grayValue;
				image_1.setRGB(x, y, rgb);
			}
		}

		// Save the modified image to file
		String outputPath = fileName;
		File outputFile = new File(outputPath);
		ImageIO.write(image_1, "png", outputFile);
	}
}


package ECTE331_Project_A;

import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class ThreadA extends Thread {
	private int startRow;
	private int endRow;
	private int[][] source_pixel;
	private int[][] template_pixel;
	private boolean[][] visited;
	private int source_image_width;
	private int source_image_height;
	private int template_image_width;
	private int template_image_height;
	private int temp_size;
	private double minimum;
	private double absDiffMat;
	private double absDiff;
	int[][] slice_of_source_image;
	ArrayList<Integer> rows = new ArrayList<>();
	ArrayList<Integer> columns = new ArrayList<>();
	double[][] all_abs_diff;

	public ThreadA(int startRow, int endRow, int[][] source_pixel, int[][] template_pixel, boolean[][] visited, int source_image_width, int source_image_height, int template_image_width, int template_image_height) {
		this.startRow = startRow;
		this.endRow = endRow;
		this.source_pixel = source_pixel;
		this.template_pixel = template_pixel;
		this.visited = visited;
		this.source_image_width = source_image_width;
		this.source_image_height = source_image_height;
		this.template_image_width = template_image_width;
		this.template_image_height = template_image_height;

		this.temp_size = template_image_height * template_image_width;
		this.minimum = 10e5;
		this.absDiffMat = 0;
		this.absDiff = 0;
		this.slice_of_source_image = new int[template_image_height][template_image_width];
		
	}

	@Override
	public void run() {
		all_abs_diff = new double[endRow-startRow][source_image_width-template_image_width];
		for (int i = 0; i < endRow - startRow; i++) {
			for (int j = 0; j < (source_image_width - template_image_width); j++) {
				for(int k=0; k<(template_image_height); k++)
				{
					for(int l=0; l<(template_image_width); l++)
					{
						if((startRow + i + k) >= 1146)
						{
							break;
						}
						else
						{
							slice_of_source_image[k][l] = source_pixel[startRow+i+k][j+l];	
						}
							
					}
				}
				
				absDiffMat = 0;
				
				for (int i1 = 0; i1 < template_image_height; i1++) 
				{
					for (int j1 = 0; j1 < template_image_width; j1++) 
					{
						absDiff = Math.abs(slice_of_source_image[i1][j1] - template_pixel[i1][j1]);
						absDiffMat+= absDiff;						
					}
				}
				absDiffMat = absDiffMat/temp_size;
				all_abs_diff[i][j] = absDiffMat;

				if (absDiffMat < minimum)
				{
					minimum=absDiffMat;
				}
				
			}
		}

		double ratio = 10; 
		double threshold = ratio * minimum;

		synchronized (visited) {
			for (int i = 0; i < (endRow-startRow); i++) {
				for (int j = 0; j < (source_image_width - template_image_width); j++) {
					if (!visited[startRow+i][j] && all_abs_diff[i][j] <= threshold) {
						markVisited(visited, startRow+i, j, template_image_width, template_image_height);
						rows.add(startRow+i);
						columns.add(j);
					}
				}
			}
		}


		System.out.println("Rows: " + rows);
		System.out.println("Columns: " + columns);	


	}

	// Example: Thresholding logic



	public ArrayList<Integer> getRows() {
		return rows;
	}

	public void setRows(ArrayList<Integer> rows) {
		this.rows = rows;
	}

	public ArrayList<Integer> getColumns() {
		return columns;
	}

	public void setColumns(ArrayList<Integer> columns) {
		this.columns = columns;
	}

	private void markVisited(boolean[][] visited, int startX, int startY, int width, int height) {
		for (int i = startX; i < startX + height; i++) {
			for (int j = startY; j < startY + width; j++) {
				visited[i][j] = true;
			}
		}
	}
}

